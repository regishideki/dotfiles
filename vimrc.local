set backspace=indent,eol,start
set hlsearch
map <Leader>h :noh<cr>
set textwidth=120

nnoremap <Leader>w :w!<CR>
nnoremap <Leader>q :q!<CR>
nnoremap <Leader>wq :wq!<CR>
imap jj <Esc>

nnoremap <Leader><Right> <C-w>3>
nnoremap <Leader><Left> <C-w>3<
nnoremap <Leader><Up> <C-w>3+
nnoremap <Leader><Down> <C-w>3-

map <Leader>i mmgg=G`m<CR>
map <Leader>x :exec getline(".")<cr>
map <Leader>ss :%s/

map <C-n> :NERDTreeToggle<CR>
map <leader>rr :NERDTreeFind<cr>

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

nnoremap <leader>osr :VtrOpenRunner<CR>
nnoremap <leader>va :VtrAttachToPane<CR>
nnoremap <C-f> :VtrSendLinesToRunner<CR>
nnoremap <leader>sc :VtrSendCommandToRunner<CR>

" remove files from crlp
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/bower_components/*,*/node_modules/*,*/dist/*,*/vendor/*

" --column: Show column number
" --line-number: Show line number
" --no-heading: Do not show file headings in results
" --fixed-strings: Search term as a literal string
" --ignore-case: Case insensitive search
" --no-ignore: Do not respect .gitignore, etc...
" --hidden: Search hidden files and folders
" --follow: Follow symlinks
" --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
" --color: Search color options
command! -bang -nargs=* FF call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)

let g:rg_command = ' 
      \ rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --color "always"
      \ -g "*.{js,json,php,md,styl,jade,html,config,py,cpp,c,go,hs,rb,conf}"
      \ -g "!{.git,node_modules,vendor}/*" '

set grepprg=rg\ --vimgrep

" permits navigates in requires as hyperlinks
augroup rubypath
  autocmd FileType ruby setlocal suffixesadd+=.rb
  autocmd FileType ruby setlocal path+=~/workspace/bankfacil/core/**
augroup END

let g:tmuxline_preset = {
      \'a'    : '#S',
      \'b'    : '#F',
      \'win'  : '#I #W',
      \'cwin' : '#I #W',
      \'y'    : '#(date)',
      \'z'    : '%R'}

if exists('$TMUX')
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    silent! execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      call system("tmux select-pane -" . a:tmuxdir)
      redraw!
    endif
  endfunction

  let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

  nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<cr>
  nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<cr>
  nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<cr>
  nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<cr>
endif

" reduce default opdate time from 4s to 250ms (update signs in gitgutter, for example)
set updatetime=250

" install pathogen
execute pathogen#infect()
syntax on
filetype plugin indent on

if isdirectory('/Users/regishattori/dotfiles/UltiSnips')
  let g:UltiSnipsSnippetsDir = '/Users/regishattori/dotfiles/UltiSnips'
  let g:UltiSnipsSnippetDirectories = ['/Users/regishattori/dotfiles/UltiSnips']
endif

let test#strategy = "tslime"
let g:tslime_always_current_session = 1
let g:tslime_always_current_window = 1
vmap <C-c><C-c> <Plug>SendSelectionToTmux
nmap <C-c><C-c> <Plug>NormalModeSendToTmux
nmap <C-c>r <Plug>SetTmuxVars

function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

autocmd BufWritePre *.rb,*.js :call <SID>StripTrailingWhitespaces()
