alias aliases="vim ~/dotfiles/aliases.local"
alias gitconfig="vim ~/dotfiles/gitconfig.local"
alias vimrc="vim ~/dotfiles/vimrc"
alias tmuxconf="vim ~/dotfiles/tmux.conf"
alias saliases="source ~/.aliases"
alias sz="source ~/.zshrc"
alias sv="source ~/.vimrc"

alias gs="git status"

alias pl="cd ~/workspace/regis/programming-languages"

alias prelude_install="rm -rf ~/.emacs.d && export PRELUDE_URL=https://github.com/regishideki/prelude.git && curl -L https://github.com/bbatsov/prelude/raw/master/utils/installer.sh | sh"

alias irb="source /home/regis/.rvm/scripts/rvm && irb"
alias work="cd ~/workspace"
alias bkf="work; cd bankfacil"
alias core="bkf; cd core"
alias dockerdev="bkf; cd docker-dev"
alias mdo="bkf; middle-office"

alias netbkf="docker network create bankfacil"
alias uppg="dockerdev; docker-compose up -d postgres; cd -"
alias upcore="core; docker-compose up -d core"
alias doccore="docker exec -it core"
alias docspec="doccore rspec"
alias preparetest="docker exec -it -e HANAMI_ENV=test core hanami db prepare"
alias preparedev="doccore hanami db prepare"
alias k="kubectl"
alias uuid="uuidgen | tr -d '\n' | tr '[:upper:]' '[:lower:]'"

alias brew="arch -arm64 brew"

alias sed="sed -E"

gitbranches() {
  git for-each-ref --format=' %(authorname) %09 %(refname)' --sort=authorname
}

gitmybranches() {
  git for-each-ref --format=' %(authorname) %09 %(refname)' --sort=authorname | grep 'Regis Hideki Hattori'
}

gitmerge() {
  git checkout $1
  git pull origin $1
  git checkout -
  git merge $1
}

gcapf() {
  gca "$@" && gpf
}

gca() {
  message="$@"

  git commit --amend
}

gc() {
  message="$@"

  git commit -m $message
}

gpf() {
  git push -f
}

function whouseport() {
  port="$1"

  lsof -nP -i4TCP:$port | grep LISTEN
}

function killwhouseport() {
  port="$1"

  kill $(lsof -nP -i4TCP:$port | grep LISTEN | awk '{print $2}')
}

function dockerLocalPostgresCommand() {
  command="$1"

  docker exec -it local_postgres psql -U postgres -c "$command"
}

function gitMoveTagToCurrentCommit() {
  tagName="$1"

  git push origin :refs/tags/$tagName
  git tag -fa $tagName
  git push origin master --tags
}

function enterPod() {
  namespace="$1"
  podPrefix="$2"

  bash -c "kubectl exec -it -n $namespace $(kubectl get pods --no-headers -n $namespace -o custom-columns=":metadata.name" --field-selector=status.phase=Running | grep $podPrefix | tail -n 1) -- bash"
}

function createOrUpdateSecretEntry() {
  namespace="$1"
  secretName="$2"
  key="$3"
  value="$4"

  bash -c "kubectl get secret $secretName -n $namespace -o json | jq --arg $key "$(echo -n $value | base64)" '.data[\"$key\"]=\$$key' | kubectl apply -f -"
}

function encode() {
  text="$1"

  echo -n $text | base64
}

function decode() {
  text="$1"

  echo -n $text | base64 -d
}

show_contents() {
    local separator="-------------------------------------------------------------------------------------------"
    local input_paths=("$@")

    for target_path in "${input_paths[@]}"; do
        # Expande os wildcards manualmente se necessário
        local expanded_paths=($target_path)
        for expanded_path in "${expanded_paths[@]}"; do
            if [ -f "$expanded_path" ]; then
                echo "Arquivo: $expanded_path"
                cat "$expanded_path"
                echo "$separator"
            elif [ -d "$expanded_path" ]; then
                find "$expanded_path" -type f -print0 | while IFS= read -r -d '' file; do
                    echo "Arquivo: $file"
                    cat "$file"
                    echo "$separator"
                done
            else
                echo "O caminho fornecido não é um arquivo nem uma pasta: $expanded_path"
            fi
        done
    done
}
